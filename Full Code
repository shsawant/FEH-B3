#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <math.h>
#include <FEHServo.h>
#include <FEHRPS.h>
#include <FEHAccel.h>
#include <FEHSD.h>

#define PI 3.14159265
//declare motors and sensors

FEHMotor front(FEHMotor::Motor0, 7.2);
FEHMotor right(FEHMotor::Motor1, 7.2);
FEHMotor back(FEHMotor::Motor2, 7.2);
FEHMotor left(FEHMotor::Motor3, 7.2);

DigitalInputPin FrontSwitch(FEHIO::P1_7);
DigitalInputPin LeftSwitch(FEHIO::P2_0);

AnalogInputPin CdS_cell(FEHIO::P0_0);

FEHServo arm_servo(FEHServo::Servo0);


#define CARJACKANGLE 120
#define IDEALPOWER 50
#define SPINPOWER 25


void RPSTest()
{

    LCD.Clear();
    //Write initial screen info
   LCD.WriteRC("RPS Test Program",0,0);
   LCD.WriteRC("X Position:",2,0);
   LCD.WriteRC("Y Position:",3,0);
   LCD.WriteRC("   Heading:",4,0);

   LCD.WriteRC(" Fuel Type:",6,0);

    while( true )
    {
        LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
        LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
        LCD.WriteRC(RPS.Heading(),4,12); //update the heading
        LCD.WriteRC(RPS.FuelType(),6,12);

        Sleep(10); //wait for a 10ms to avoid updating the screen too quickly
    }
}

void ServoSetup()
{
    arm_servo.SetMin(500);
    arm_servo.SetMax(2450);
}

void MoveTime(float degrees, float power, int time)
{
    //Convert angle in degrees to radians
    float radians = degrees * (PI/180.0);

    //Set motors to correct power to move in specified direction
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));

    Sleep(time);

    //Turn motors off after moving for specified time
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}
void MoveTimeFloat(float degrees, float power, float time)
{
    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    Sleep(time);
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}

void MoveDead(float degrees, float power)
{
    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    while(RPS.IsDeadzoneActive() != 2){}
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);

}

void MoveRPS(float power, float FinalX, float FinalY)
{
    float offset = 0;

    float StartX = RPS.X();
    float StartY = RPS.Y();

    //find what quadrant angle is in
    LCD.Clear();

    if (StartX < 0 || StartY < 0)
    {
        MoveTime(180, 50, 30);
    }
    else if ((FinalX < StartX) && (FinalY > StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 2", 1, 1);
    }
    else if ((FinalX < StartX) && (FinalY < StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 3",1,1);
    }
    else if ((FinalX > StartX) && (FinalY > StartY))
    {
        offset = PI;
        LCD.WriteAt("Quadrant 1",1,1);
    }
    else
    {
        offset = PI;
        LCD.WriteAt("Quadrant 4",1,1);
    }



    float radians = atan((FinalX - StartX)/(FinalY - StartY)) + offset;
    float degrees = radians*180/PI;
    LCD.WriteAt(degrees, 1, 50);


    Sleep(100);


    float distance = pow(pow(FinalX-StartX , 2) + pow(FinalY-StartY, 2), .5);
    if (distance < 10)
    {
        MoveTimeFloat(degrees - RPS.Heading(), power, distance/20);
        LCD.WriteAt(distance, 1, 100);
    }

    while((abs(RPS.X() - FinalX) > 1.0) || (abs(RPS.Y() - FinalY) > 1.0)){
        MoveRPS(power, FinalX,FinalY);

    }


}

void MoveRPSClose(float power, float FinalX, float FinalY)
{
    float offset = 0;



    //find what quadrant angle is in
    LCD.Clear();
    while((abs(RPS.X() - FinalX) > 0.5) || (abs(RPS.Y() - FinalY) > 0.5)){
         float StartX = RPS.X();
         float StartY = RPS.Y();

    if (StartX < 0 || StartY < 0)
    {
        MoveTime(180, 50, 30);
    }
    else if ((FinalX < StartX) && (FinalY > StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 2", 1, 1);
    }
    else if ((FinalX < StartX) && (FinalY < StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 3",1,1);
    }
    else if ((FinalX > StartX) && (FinalY > StartY))
    {
        offset = PI;
        LCD.WriteAt("Quadrant 1",1,1);
    }
    else
    {
        offset = PI;
        LCD.WriteAt("Quadrant 4",1,1);
    }


    float radians = atan((FinalX - StartX)/(FinalY - StartY)) + offset;
    float degrees = radians*180/PI;
    LCD.WriteAt(degrees, 1, 50);


    Sleep(100);


    float distance = pow(pow(FinalX-StartX , 2) + pow(FinalY-StartY, 2), .5);
    MoveTimeFloat(degrees - RPS.Heading(), power, distance/10);
    LCD.WriteAt(distance, 1, 100);

    }


}

void ChangeOrientation(int time, float direction) //direction is 1.0 for counterclockwise, -1.0 for clockwise
{
    front.SetPercent(direction * IDEALPOWER/2);
    right.SetPercent(direction * IDEALPOWER/2);
    back.SetPercent(direction * IDEALPOWER/2);
    left.SetPercent(direction * IDEALPOWER/2);
    Sleep(time);
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}

void CheckHeadingWhiteButton (float degrees)
{
    while (abs(RPS.Heading() - degrees) > 1.0)
    {
        LCD.Clear();
        if (RPS.Heading() == -2.00)
        {
            MoveTime(180, 50, 30);
        }
        else if((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) < 180))
        {
            ChangeOrientation(20, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);

            Sleep(100);
        }

        else if ((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) > 180))
        {
            ChangeOrientation(20, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(100);
        }
        else if ((RPS.Heading() < degrees) && ((RPS.Heading() - degrees) < 180) )
        {
            ChangeOrientation(20, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(100);
        }
        else if ((RPS.Heading() < degrees) && (((RPS.Heading() - degrees) < 180)))
        {
            ChangeOrientation(20, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(100);
        }

    }
}



void CheckHeading(float degrees)
{
    while (abs(RPS.Heading() - degrees) > 1.0)
    {
        LCD.Clear();
        if (RPS.Heading() == -2.00)
        {
            MoveTime(180, 50, 30);
        }
        else if((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) < 180))
        {
            ChangeOrientation(20, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);

            Sleep(50);
        }

        else if ((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) > 180))
        {
            ChangeOrientation(20, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(50);
        }
        else if ((RPS.Heading() < degrees) && ((RPS.Heading() - degrees) < 180) )
        {
            ChangeOrientation(20, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(50);
        }
        else if ((RPS.Heading() < degrees) && (((RPS.Heading() - degrees) < 180)))
        {
            ChangeOrientation(20, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(50);
        }

    }
}

void MoveTouch(float degrees, float power)
{
    float x,y;
    float radians = degrees * (PI/180.0);
    LCD.Clear();
    float start = TimeNow();
    while (!LCD.Touch(&x,&y))
    {
        front.SetPercent(power*cos(radians));
        right.SetPercent(power*-sin(radians));
        back.SetPercent(.97*power*-cos(radians));
        left.SetPercent(power*sin(radians));
    }
    float finish = TimeNow() - start;
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
    LCD.WriteAt(finish, 1, 1);
}

void StartProgram(AnalogInputPin CdS)
{
    float StartTime = TimeNow();
    while(CdS.Value() > 2 && (abs(TimeNow() - StartTime) < 30)){}
}

void SpinTouch(float power)
{
    float x,y;
    float start = TimeNow();
    LCD.Clear();
    while (!LCD.Touch(&x,&y))
    {
        front.SetPercent(power);
        right.SetPercent(power);
        back.SetPercent(power);
        left.SetPercent(power);
    }
    float finish = TimeNow() - start;
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
    LCD.WriteAt(finish, 1, 1);
}


void MoveStuck(float direction, float power, float BeforeCarJackX)
{
    float startPosition = RPS.Y();
    int isStuck = 1;

    MoveTime(direction, power, 2000);
    while(isStuck){
    if(abs(RPS.Y() - startPosition) < 5 && RPS.X() < BeforeCarJackX)
    {
        MoveTime(0, 75, 400);
    }
    else if(abs(RPS.Y() - startPosition) < 5 && RPS.X() > BeforeCarJackX)
    {
        MoveTime(180, 75, 400);
    }
    isStuck = 0;
    }

    MoveTouch(direction, power);
}

void ChooseButtonComp(int buttonColor)
{
    MoveTime(270, 25, 350);
    CheckHeadingWhiteButton(0);
    LCD.Clear();
    Sleep(50);
    if(buttonColor == 1)
    {
        LCD.WriteAt("RED",100,1);

        MoveTime(0, 75,333);
        MoveTime(90,40,600);
        Sleep(100);
        MoveTime(270, 40, 500);
        CheckHeading(0);
        MoveTime(0, 75, 700);
    }
    else
    {
        LCD.WriteAt("BLUE",100,1);

        MoveTime(180,75,333);
        MoveTime(90,40,600);
        Sleep(100);
        MoveTime(270, 40, 500);
        CheckHeading(0);
        MoveTime(0, 75, 1250);
    }

}

int WhiteButton(float XPosition, float YPosition, AnalogInputPin CdS_cell)
{
    int buttonColor = 0; //blue
    MoveTime(138, 101, 965);
    MoveRPS(50,XPosition, YPosition);
    
    if (CdS_cell.Value() < 1.5)
    {
        buttonColor = 1; //red
    }
    CheckHeadingWhiteButton(0);
    MoveTime(90,25,1400);
    MoveDead(90, 40);
}

int main(void)
{

   SD.OpenLog();


   RPS.InitializeTouchMenu();

   float a, b, c, d ,e, f, g, h, i, k, l, m, n, o, p, q;
     LCD.WriteRC("X Position:",2,0);
     LCD.WriteRC("Y Position:",3,0);

     while (!LCD.Touch(&a, &b))
     {
       LCD.WriteRC("White Button             ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float WhiteButtonX = RPS.X();
     float WhiteButtonY = RPS.Y();
     SD.Printf("%f %f\n", WhiteButtonX, WhiteButtonY);
     Sleep(1500);

     while (!LCD.Touch(&c, &d))
     {
       LCD.WriteRC("Before Car Jack", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeCarJackX = RPS.X();
     float BeforeCarJackY = RPS.Y();
     SD.Printf("%f %f\n", BeforeCarJackX, BeforeCarJackY);

     Sleep(1500);


     while (!LCD.Touch(&e, &f))
     {
       LCD.WriteRC("Wrench                ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float WrenchX = RPS.X();
     float WrenchY = RPS.Y();
     SD.Printf("%f %f\n", WrenchX, WrenchY);

     Sleep(1500);


     while (!LCD.Touch(&g, &h))
     {
       LCD.WriteRC("Before Garage              ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeGarageX = RPS.X();
     float BeforeGarageY = RPS.Y();
     SD.Printf("%f %f\n", BeforeGarageX, BeforeGarageY);

     Sleep(1500);

     while (!LCD.Touch(&l, &m))
     {
       LCD.WriteRC("Before Nitro              ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeNitroX = RPS.X();
     float BeforeNitroY = RPS.Y();
     SD.Printf("%f %f\n", BeforeNitroX, BeforeNitroY);


     Sleep(1500);


     while (!LCD.Touch(&n, &o))
     {
       LCD.WriteRC("Before Octane             ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeOctaneX = RPS.X();
     float BeforeOctaneY = RPS.Y();
     SD.Printf("%f %f\n", BeforeOctaneX, BeforeOctaneY);


     Sleep(1500);

     while (!LCD.Touch(&p, &q))
     {
       LCD.WriteRC("After Fuel Crank             ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float AfterFuelCrankX = RPS.X();
     float AfterFuelCrankY = RPS.Y();
     SD.Printf("%f %f\n", AfterFuelCrankX, AfterFuelCrankY);


     Sleep(1500);


     while (!LCD.Touch(&i, &k))
     {
         LCD.WriteRC("Click Screen when told to press final button             ", 0, 0);
     }

     if (WhiteButtonX < 0 ||  BeforeCarJackX < 0 || WrenchX < 0 || BeforeGarageX < 0 || BeforeNitroX < 0 
     ||BeforeOctaneX < 0 || AfterFuelCrankX < 0)
    {
         WhiteButton(WhiteButtonX, WhiteButtonY);
    }



    StartProgram(CdS_cell);
    WhiteButton(WhiteButtonX, WhiteButtonY);

    ChooseButtonComp();
    MoveRPS(50, BeforeCarJackX, BeforeCarJackY);//Find position between control panel and Car Jack
    CheckHeading(0);
    MoveTime(50, 106, 1400);
    MoveTime(180, 50, 1000);
    MoveTime(0, 50, 150);// Move back from car jack
    CheckHeading(0);
    MoveTime(270, 75, 1013); //Align with Wrench
    MoveTime(180, 50, 150);
    CheckHeading(0);
    MoveRPSClose(30, WrenchX + 1.8, WrenchY);
    CheckHeading(0);
    arm_servo.SetDegree(178);
    Sleep(1000);
    MoveTime(0, 25, 1400); //Move to Wrench
    Sleep(200);
    arm_servo.SetDegree(90);
    MoveTime(180, 25, 1000);

    MoveTime(305, 80, 1188);
    ChangeOrientation(1000, -1.0);
    CheckHeading(315);
    MoveTime(315, 141, 2000);

    CheckHeading(315);
    MoveTime(270, 75, 1733); //Towards Garage
    CheckHeading(315);
    MoveRPS(40, BeforeGarageX, BeforeGarageY);
    CheckHeading(315);
    MoveTime(0,75, 1400);
    arm_servo.SetDegree(178);
    Sleep(300);
    MoveTime(180, 25, 100);
    Sleep(300);
    MoveTime(0, 25, 100);
    Sleep(300);
    MoveTime(180, 50, 1000);
    arm_servo.SetDegree(90);
    Sleep(1000);

    CheckHeading(315);
    ChangeOrientation(2000, -1.0);
    CheckHeading(225);

        if(RPS.FuelType() == 1)
        {
            MoveRPS(35, BeforeOctaneX - 6.5, BeforeOctaneY - 6.5);
            MoveTime(90, 25,300);
            arm_servo.SetDegree(100);
            MoveTime(0, 25, 3300);
            MoveTime(270, 25, 4000);
            MoveTime(180, 50, 1800);
            ChangeOrientation(1000, -1.0);
            MoveTime(315, 106, 1000);
        }

        else if(RPS.FuelType() == 2)
        {
            arm_servo.SetDegree(100);
            //MoveRPS(25, BeforeGarageX, BeforeGarageY);
            CheckHeading(225);
            MoveTime(270, 40, 700);
            MoveRPS(25, BeforeNitroX - 5.5, BeforeNitroY - 6.5);
            CheckHeading(225);
            MoveTime(0, 25, 3500);
            MoveTime(90, 25, 4000);
            MoveTime(180, 50, 1700);
            ChangeOrientation(1000, -1.0);
            MoveTime(315, 106, 1641);


        }

        MoveRPS(75, AfterFuelCrankX, AfterFuelCrankY);
        CheckHeading(180);

        arm_servo.SetDegree(10);
        MoveTime(270, 75, 1600);
        CheckHeading(180);

        MoveTime(180, 83, 1200);

        MoveStuck(90, 75, BeforeCarJackX);






    SD.CloseLog();




   return 0;
}
